Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR
    OPERATOR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     program -> MAIN LRB RRB block
Rule 3     declist -> dec
Rule 4     declist -> declist dec
Rule 5     dec -> vardec
Rule 6     dec -> funcdec
Rule 7     type -> INTEGER
Rule 8     type -> FLOAT
Rule 9     type -> BOOLEAN
Rule 10    iddec -> ID
Rule 11    iddec -> ID LSB exp RSB
Rule 12    iddec -> ID ASSIGN exp
Rule 13    idlist -> iddec
Rule 14    idlist -> idlist COMMA iddec
Rule 15    vardec -> idlist COLON type SEMICOLON
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 17    funcdec -> FUNCTION ID LRB RRB COLON type block
Rule 18    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 19    funcdec -> FUNCTION ID LRB RRB block
Rule 20    paramdecs -> paramdecslist
Rule 21    paramdecslist -> paramdec
Rule 22    paramdecslist -> paramdecslist COMMA paramdec
Rule 23    paramdec -> ID COLON type
Rule 24    paramdec -> ID LSB RSB COLON type
Rule 25    block -> LCB stmtlist RCB
Rule 26    block -> LCB RCB
Rule 27    stmtlist -> stmt
Rule 28    stmtlist -> stmtlist stmt
Rule 29    case -> WHERE const COLON stmtlist
Rule 30    case -> WHERE const COLON
Rule 31    cases -> case
Rule 32    cases -> cases case
Rule 33    stmt -> RETURN exp SEMICOLON
Rule 34    stmt -> exp SEMICOLON
Rule 35    stmt -> block
Rule 36    stmt -> vardec
Rule 37    stmt -> WHILE LRB exp RRB stmt
Rule 38    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 39    stmt -> ON LRB exp RRB LCB RCB SEMICOLON
Rule 40    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 41    stmt -> FOR LRB ID IN ID RRB stmt
Rule 42    stmt -> IF LRB exp RRB stmt elseiflist
Rule 43    stmt -> IF LRB exp RRB stmt
Rule 44    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 45    stmt -> IF LRB exp RRB stmt ELSE stmt
Rule 46    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 47    elseiflist -> ELSEIF LRB exp RRB stmt
Rule 48    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 49    relopexp -> exp GT exp
Rule 50    relopexp -> exp LT exp
Rule 51    relopexp -> exp NE exp
Rule 52    relopexp -> exp EQ exp
Rule 53    relopexp -> exp GE exp
Rule 54    relopexp -> exp LE exp
Rule 55    otherop -> exp AND exp
Rule 56    otherop -> exp OR exp
Rule 57    otherop -> exp SUM exp
Rule 58    otherop -> exp SUB exp
Rule 59    otherop -> exp MUL exp
Rule 60    otherop -> exp DIV exp
Rule 61    otherop -> exp MOD exp
Rule 62    exp -> ID ASSIGN exp
Rule 63    exp -> ID LSB exp RSB ASSIGN exp
Rule 64    exp -> relopexp
Rule 65    exp -> otherop
Rule 66    exp -> const
Rule 67    exp -> ID
Rule 68    exp -> ID LSB exp RSB
Rule 69    exp -> ID LRB explist RRB
Rule 70    exp -> LRB exp RRB
Rule 71    exp -> ID LRB RRB
Rule 72    exp -> SUB exp
Rule 73    exp -> NOT exp
Rule 74    const -> INTEGERNUMBER
Rule 75    const -> FLOATNUMBER
Rule 76    const -> TRUE
Rule 77    const -> FALSE
Rule 78    explist -> exp
Rule 79    explist -> explist COMMA exp

Terminals, with rules where they appear

AND                  : 55
ASSIGN               : 12 62 63
BOOLEAN              : 9
COLON                : 15 16 17 23 24 29 30
COMMA                : 14 22 79
DIV                  : 60
ELSE                 : 44 45
ELSEIF               : 47 48
EQ                   : 52
ERROR                : 
FALSE                : 77
FLOAT                : 8
FLOATNUMBER          : 75
FOR                  : 40 41
FUNCTION             : 16 17 18 19
GE                   : 53
GT                   : 49
ID                   : 10 11 12 16 17 18 19 23 24 41 41 46 62 63 67 68 69 71
IF                   : 42 43 44 45
IN                   : 41
INTEGER              : 7
INTEGERNUMBER        : 74
LCB                  : 25 26 38 39
LE                   : 54
LRB                  : 1 2 16 17 18 19 37 38 39 40 41 42 43 44 45 46 47 48 69 70 71
LSB                  : 11 24 63 68
LT                   : 50
MAIN                 : 1 2
MOD                  : 61
MUL                  : 59
NE                   : 51
NOT                  : 73
ON                   : 38 39
OPERATOR             : 
OR                   : 56
PRINT                : 46
RCB                  : 25 26 38 39
RETURN               : 33
RRB                  : 1 2 16 17 18 19 37 38 39 40 41 42 43 44 45 46 47 48 69 70 71
RSB                  : 11 24 63 68
SEMICOLON            : 15 33 34 38 39 40 40 46
SUB                  : 58 72
SUM                  : 57
TRUE                 : 76
WHERE                : 29 30
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

block                : 1 2 16 17 18 19 35
case                 : 31 32
cases                : 32 38
const                : 29 30 66
dec                  : 3 4
declist              : 1 4
elseiflist           : 42 44 48
exp                  : 11 12 33 34 37 38 39 40 40 40 42 43 44 45 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 63 63 68 70 72 73 78 79
explist              : 69 79
funcdec              : 6
iddec                : 13 14
idlist               : 14 15
otherop              : 65
paramdec             : 21 22
paramdecs            : 16 18
paramdecslist        : 20 22
program              : 0
relopexp             : 64
stmt                 : 27 28 37 40 41 42 43 44 44 45 45 47 48
stmtlist             : 25 28 29
type                 : 15 16 17 23 24
vardec               : 5 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) program -> . MAIN LRB RRB block
    (3) declist -> . dec
    (4) declist -> . declist dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB RRB COLON type block
    (18) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (19) funcdec -> . FUNCTION ID LRB RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    program                        shift and go to state 1
    declist                        shift and go to state 2
    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (4) declist -> declist . dec
    (5) dec -> . vardec
    (6) dec -> . funcdec
    (15) vardec -> . idlist COLON type SEMICOLON
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (17) funcdec -> . FUNCTION ID LRB RRB COLON type block
    (18) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (19) funcdec -> . FUNCTION ID LRB RRB block
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 11
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 12
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 3

    (2) program -> MAIN . LRB RRB block

    LRB             shift and go to state 13


state 4

    (3) declist -> dec .

    MAIN            reduce using rule 3 (declist -> dec .)
    FUNCTION        reduce using rule 3 (declist -> dec .)
    ID              reduce using rule 3 (declist -> dec .)


state 5

    (5) dec -> vardec .

    MAIN            reduce using rule 5 (dec -> vardec .)
    FUNCTION        reduce using rule 5 (dec -> vardec .)
    ID              reduce using rule 5 (dec -> vardec .)


state 6

    (6) dec -> funcdec .

    MAIN            reduce using rule 6 (dec -> funcdec .)
    FUNCTION        reduce using rule 6 (dec -> funcdec .)
    ID              reduce using rule 6 (dec -> funcdec .)


state 7

    (15) vardec -> idlist . COLON type SEMICOLON
    (14) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 14
    COMMA           shift and go to state 15


state 8

    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION . ID LRB RRB COLON type block
    (18) funcdec -> FUNCTION . ID LRB paramdecs RRB block
    (19) funcdec -> FUNCTION . ID LRB RRB block

    ID              shift and go to state 16


state 9

    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)
    LSB             shift and go to state 17
    ASSIGN          shift and go to state 18


state 10

    (13) idlist -> iddec .

    COLON           reduce using rule 13 (idlist -> iddec .)
    COMMA           reduce using rule 13 (idlist -> iddec .)


state 11

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 19


state 12

    (4) declist -> declist dec .

    MAIN            reduce using rule 4 (declist -> declist dec .)
    FUNCTION        reduce using rule 4 (declist -> declist dec .)
    ID              reduce using rule 4 (declist -> declist dec .)


state 13

    (2) program -> MAIN LRB . RRB block

    RRB             shift and go to state 20


state 14

    (15) vardec -> idlist COLON . type SEMICOLON
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 21

state 15

    (14) idlist -> idlist COMMA . iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    ID              shift and go to state 9

    iddec                          shift and go to state 25

state 16

    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID . LRB RRB COLON type block
    (18) funcdec -> FUNCTION ID . LRB paramdecs RRB block
    (19) funcdec -> FUNCTION ID . LRB RRB block

    LRB             shift and go to state 26


state 17

    (11) iddec -> ID LSB . exp RSB
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 28
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 18

    (12) iddec -> ID ASSIGN . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 39
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 19

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 40


state 20

    (2) program -> MAIN LRB RRB . block
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB

    LCB             shift and go to state 42

    block                          shift and go to state 41

state 21

    (15) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 43


state 22

    (7) type -> INTEGER .

    SEMICOLON       reduce using rule 7 (type -> INTEGER .)
    COMMA           reduce using rule 7 (type -> INTEGER .)
    RRB             reduce using rule 7 (type -> INTEGER .)
    LCB             reduce using rule 7 (type -> INTEGER .)


state 23

    (8) type -> FLOAT .

    SEMICOLON       reduce using rule 8 (type -> FLOAT .)
    COMMA           reduce using rule 8 (type -> FLOAT .)
    RRB             reduce using rule 8 (type -> FLOAT .)
    LCB             reduce using rule 8 (type -> FLOAT .)


state 24

    (9) type -> BOOLEAN .

    SEMICOLON       reduce using rule 9 (type -> BOOLEAN .)
    COMMA           reduce using rule 9 (type -> BOOLEAN .)
    RRB             reduce using rule 9 (type -> BOOLEAN .)
    LCB             reduce using rule 9 (type -> BOOLEAN .)


state 25

    (14) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 14 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 14 (idlist -> idlist COMMA iddec .)


state 26

    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (17) funcdec -> FUNCTION ID LRB . RRB COLON type block
    (18) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (19) funcdec -> FUNCTION ID LRB . RRB block
    (20) paramdecs -> . paramdecslist
    (21) paramdecslist -> . paramdec
    (22) paramdecslist -> . paramdecslist COMMA paramdec
    (23) paramdec -> . ID COLON type
    (24) paramdec -> . ID LSB RSB COLON type

    RRB             shift and go to state 46
    ID              shift and go to state 44

    paramdecs                      shift and go to state 45
    paramdecslist                  shift and go to state 47
    paramdec                       shift and go to state 48

state 27

    (62) exp -> ID . ASSIGN exp
    (63) exp -> ID . LSB exp RSB ASSIGN exp
    (67) exp -> ID .
    (68) exp -> ID . LSB exp RSB
    (69) exp -> ID . LRB explist RRB
    (71) exp -> ID . LRB RRB

    ASSIGN          shift and go to state 49
    LSB             shift and go to state 50
    RSB             reduce using rule 67 (exp -> ID .)
    GT              reduce using rule 67 (exp -> ID .)
    LT              reduce using rule 67 (exp -> ID .)
    NE              reduce using rule 67 (exp -> ID .)
    EQ              reduce using rule 67 (exp -> ID .)
    GE              reduce using rule 67 (exp -> ID .)
    LE              reduce using rule 67 (exp -> ID .)
    AND             reduce using rule 67 (exp -> ID .)
    OR              reduce using rule 67 (exp -> ID .)
    SUM             reduce using rule 67 (exp -> ID .)
    SUB             reduce using rule 67 (exp -> ID .)
    MUL             reduce using rule 67 (exp -> ID .)
    DIV             reduce using rule 67 (exp -> ID .)
    MOD             reduce using rule 67 (exp -> ID .)
    COLON           reduce using rule 67 (exp -> ID .)
    COMMA           reduce using rule 67 (exp -> ID .)
    RRB             reduce using rule 67 (exp -> ID .)
    SEMICOLON       reduce using rule 67 (exp -> ID .)
    LRB             shift and go to state 51


state 28

    (11) iddec -> ID LSB exp . RSB
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             shift and go to state 52
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 29

    (64) exp -> relopexp .

    RSB             reduce using rule 64 (exp -> relopexp .)
    GT              reduce using rule 64 (exp -> relopexp .)
    LT              reduce using rule 64 (exp -> relopexp .)
    NE              reduce using rule 64 (exp -> relopexp .)
    EQ              reduce using rule 64 (exp -> relopexp .)
    GE              reduce using rule 64 (exp -> relopexp .)
    LE              reduce using rule 64 (exp -> relopexp .)
    AND             reduce using rule 64 (exp -> relopexp .)
    OR              reduce using rule 64 (exp -> relopexp .)
    SUM             reduce using rule 64 (exp -> relopexp .)
    SUB             reduce using rule 64 (exp -> relopexp .)
    MUL             reduce using rule 64 (exp -> relopexp .)
    DIV             reduce using rule 64 (exp -> relopexp .)
    MOD             reduce using rule 64 (exp -> relopexp .)
    COLON           reduce using rule 64 (exp -> relopexp .)
    COMMA           reduce using rule 64 (exp -> relopexp .)
    RRB             reduce using rule 64 (exp -> relopexp .)
    SEMICOLON       reduce using rule 64 (exp -> relopexp .)


state 30

    (65) exp -> otherop .

    RSB             reduce using rule 65 (exp -> otherop .)
    GT              reduce using rule 65 (exp -> otherop .)
    LT              reduce using rule 65 (exp -> otherop .)
    NE              reduce using rule 65 (exp -> otherop .)
    EQ              reduce using rule 65 (exp -> otherop .)
    GE              reduce using rule 65 (exp -> otherop .)
    LE              reduce using rule 65 (exp -> otherop .)
    AND             reduce using rule 65 (exp -> otherop .)
    OR              reduce using rule 65 (exp -> otherop .)
    SUM             reduce using rule 65 (exp -> otherop .)
    SUB             reduce using rule 65 (exp -> otherop .)
    MUL             reduce using rule 65 (exp -> otherop .)
    DIV             reduce using rule 65 (exp -> otherop .)
    MOD             reduce using rule 65 (exp -> otherop .)
    COLON           reduce using rule 65 (exp -> otherop .)
    COMMA           reduce using rule 65 (exp -> otherop .)
    RRB             reduce using rule 65 (exp -> otherop .)
    SEMICOLON       reduce using rule 65 (exp -> otherop .)


state 31

    (66) exp -> const .

    RSB             reduce using rule 66 (exp -> const .)
    GT              reduce using rule 66 (exp -> const .)
    LT              reduce using rule 66 (exp -> const .)
    NE              reduce using rule 66 (exp -> const .)
    EQ              reduce using rule 66 (exp -> const .)
    GE              reduce using rule 66 (exp -> const .)
    LE              reduce using rule 66 (exp -> const .)
    AND             reduce using rule 66 (exp -> const .)
    OR              reduce using rule 66 (exp -> const .)
    SUM             reduce using rule 66 (exp -> const .)
    SUB             reduce using rule 66 (exp -> const .)
    MUL             reduce using rule 66 (exp -> const .)
    DIV             reduce using rule 66 (exp -> const .)
    MOD             reduce using rule 66 (exp -> const .)
    COLON           reduce using rule 66 (exp -> const .)
    COMMA           reduce using rule 66 (exp -> const .)
    RRB             reduce using rule 66 (exp -> const .)
    SEMICOLON       reduce using rule 66 (exp -> const .)


state 32

    (70) exp -> LRB . exp RRB
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 66
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 33

    (72) exp -> SUB . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 67
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 34

    (73) exp -> NOT . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 68
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 35

    (74) const -> INTEGERNUMBER .

    RSB             reduce using rule 74 (const -> INTEGERNUMBER .)
    GT              reduce using rule 74 (const -> INTEGERNUMBER .)
    LT              reduce using rule 74 (const -> INTEGERNUMBER .)
    NE              reduce using rule 74 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 74 (const -> INTEGERNUMBER .)
    GE              reduce using rule 74 (const -> INTEGERNUMBER .)
    LE              reduce using rule 74 (const -> INTEGERNUMBER .)
    AND             reduce using rule 74 (const -> INTEGERNUMBER .)
    OR              reduce using rule 74 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 74 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 74 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 74 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 74 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 74 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 74 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 74 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 74 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 74 (const -> INTEGERNUMBER .)


state 36

    (75) const -> FLOATNUMBER .

    RSB             reduce using rule 75 (const -> FLOATNUMBER .)
    GT              reduce using rule 75 (const -> FLOATNUMBER .)
    LT              reduce using rule 75 (const -> FLOATNUMBER .)
    NE              reduce using rule 75 (const -> FLOATNUMBER .)
    EQ              reduce using rule 75 (const -> FLOATNUMBER .)
    GE              reduce using rule 75 (const -> FLOATNUMBER .)
    LE              reduce using rule 75 (const -> FLOATNUMBER .)
    AND             reduce using rule 75 (const -> FLOATNUMBER .)
    OR              reduce using rule 75 (const -> FLOATNUMBER .)
    SUM             reduce using rule 75 (const -> FLOATNUMBER .)
    SUB             reduce using rule 75 (const -> FLOATNUMBER .)
    MUL             reduce using rule 75 (const -> FLOATNUMBER .)
    DIV             reduce using rule 75 (const -> FLOATNUMBER .)
    MOD             reduce using rule 75 (const -> FLOATNUMBER .)
    COLON           reduce using rule 75 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 75 (const -> FLOATNUMBER .)
    RRB             reduce using rule 75 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 75 (const -> FLOATNUMBER .)


state 37

    (76) const -> TRUE .

    RSB             reduce using rule 76 (const -> TRUE .)
    GT              reduce using rule 76 (const -> TRUE .)
    LT              reduce using rule 76 (const -> TRUE .)
    NE              reduce using rule 76 (const -> TRUE .)
    EQ              reduce using rule 76 (const -> TRUE .)
    GE              reduce using rule 76 (const -> TRUE .)
    LE              reduce using rule 76 (const -> TRUE .)
    AND             reduce using rule 76 (const -> TRUE .)
    OR              reduce using rule 76 (const -> TRUE .)
    SUM             reduce using rule 76 (const -> TRUE .)
    SUB             reduce using rule 76 (const -> TRUE .)
    MUL             reduce using rule 76 (const -> TRUE .)
    DIV             reduce using rule 76 (const -> TRUE .)
    MOD             reduce using rule 76 (const -> TRUE .)
    COLON           reduce using rule 76 (const -> TRUE .)
    COMMA           reduce using rule 76 (const -> TRUE .)
    RRB             reduce using rule 76 (const -> TRUE .)
    SEMICOLON       reduce using rule 76 (const -> TRUE .)


state 38

    (77) const -> FALSE .

    RSB             reduce using rule 77 (const -> FALSE .)
    GT              reduce using rule 77 (const -> FALSE .)
    LT              reduce using rule 77 (const -> FALSE .)
    NE              reduce using rule 77 (const -> FALSE .)
    EQ              reduce using rule 77 (const -> FALSE .)
    GE              reduce using rule 77 (const -> FALSE .)
    LE              reduce using rule 77 (const -> FALSE .)
    AND             reduce using rule 77 (const -> FALSE .)
    OR              reduce using rule 77 (const -> FALSE .)
    SUM             reduce using rule 77 (const -> FALSE .)
    SUB             reduce using rule 77 (const -> FALSE .)
    MUL             reduce using rule 77 (const -> FALSE .)
    DIV             reduce using rule 77 (const -> FALSE .)
    MOD             reduce using rule 77 (const -> FALSE .)
    COLON           reduce using rule 77 (const -> FALSE .)
    COMMA           reduce using rule 77 (const -> FALSE .)
    RRB             reduce using rule 77 (const -> FALSE .)
    SEMICOLON       reduce using rule 77 (const -> FALSE .)


state 39

    (12) iddec -> ID ASSIGN exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    COLON           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 40

    (1) program -> declist MAIN LRB RRB . block
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB

    LCB             shift and go to state 42

    block                          shift and go to state 69

state 41

    (2) program -> MAIN LRB RRB block .

    $end            reduce using rule 2 (program -> MAIN LRB RRB block .)


state 42

    (25) block -> LCB . stmtlist RCB
    (26) block -> LCB . RCB
    (27) stmtlist -> . stmt
    (28) stmtlist -> . stmtlist stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 71
    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmtlist                       shift and go to state 70
    stmt                           shift and go to state 72
    exp                            shift and go to state 74
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 43

    (15) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 15 (vardec -> idlist COLON type SEMICOLON .)


state 44

    (23) paramdec -> ID . COLON type
    (24) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 83
    LSB             shift and go to state 84


state 45

    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (18) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 85


state 46

    (17) funcdec -> FUNCTION ID LRB RRB . COLON type block
    (19) funcdec -> FUNCTION ID LRB RRB . block
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB

    COLON           shift and go to state 86
    LCB             shift and go to state 42

    block                          shift and go to state 87

state 47

    (20) paramdecs -> paramdecslist .
    (22) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 20 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 88


state 48

    (21) paramdecslist -> paramdec .

    COMMA           reduce using rule 21 (paramdecslist -> paramdec .)
    RRB             reduce using rule 21 (paramdecslist -> paramdec .)


state 49

    (62) exp -> ID ASSIGN . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 89
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 50

    (63) exp -> ID LSB . exp RSB ASSIGN exp
    (68) exp -> ID LSB . exp RSB
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 90
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 51

    (69) exp -> ID LRB . explist RRB
    (71) exp -> ID LRB . RRB
    (78) explist -> . exp
    (79) explist -> . explist COMMA exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    RRB             shift and go to state 92
    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    explist                        shift and go to state 91
    exp                            shift and go to state 93
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 52

    (11) iddec -> ID LSB exp RSB .

    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 53

    (49) relopexp -> exp GT . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 94
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 54

    (50) relopexp -> exp LT . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 95
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 55

    (51) relopexp -> exp NE . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 96
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 56

    (52) relopexp -> exp EQ . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 97
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 57

    (53) relopexp -> exp GE . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 98
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 58

    (54) relopexp -> exp LE . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 99
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 59

    (55) otherop -> exp AND . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 100
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 60

    (56) otherop -> exp OR . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 101
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 61

    (57) otherop -> exp SUM . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 102
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 62

    (58) otherop -> exp SUB . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 103
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 63

    (59) otherop -> exp MUL . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 104
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 64

    (60) otherop -> exp DIV . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 105
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 65

    (61) otherop -> exp MOD . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 106
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 66

    (70) exp -> LRB exp . RRB
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 107
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 67

    (72) exp -> SUB exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 72 (exp -> SUB exp .)
    GT              reduce using rule 72 (exp -> SUB exp .)
    LT              reduce using rule 72 (exp -> SUB exp .)
    NE              reduce using rule 72 (exp -> SUB exp .)
    EQ              reduce using rule 72 (exp -> SUB exp .)
    GE              reduce using rule 72 (exp -> SUB exp .)
    LE              reduce using rule 72 (exp -> SUB exp .)
    AND             reduce using rule 72 (exp -> SUB exp .)
    OR              reduce using rule 72 (exp -> SUB exp .)
    SUM             reduce using rule 72 (exp -> SUB exp .)
    SUB             reduce using rule 72 (exp -> SUB exp .)
    COLON           reduce using rule 72 (exp -> SUB exp .)
    COMMA           reduce using rule 72 (exp -> SUB exp .)
    RRB             reduce using rule 72 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 72 (exp -> SUB exp .)
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! MUL             [ reduce using rule 72 (exp -> SUB exp .) ]
  ! DIV             [ reduce using rule 72 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 72 (exp -> SUB exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 68

    (73) exp -> NOT exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 73 (exp -> NOT exp .)
    GT              reduce using rule 73 (exp -> NOT exp .)
    LT              reduce using rule 73 (exp -> NOT exp .)
    NE              reduce using rule 73 (exp -> NOT exp .)
    EQ              reduce using rule 73 (exp -> NOT exp .)
    GE              reduce using rule 73 (exp -> NOT exp .)
    LE              reduce using rule 73 (exp -> NOT exp .)
    AND             reduce using rule 73 (exp -> NOT exp .)
    OR              reduce using rule 73 (exp -> NOT exp .)
    SUM             reduce using rule 73 (exp -> NOT exp .)
    SUB             reduce using rule 73 (exp -> NOT exp .)
    MUL             reduce using rule 73 (exp -> NOT exp .)
    DIV             reduce using rule 73 (exp -> NOT exp .)
    MOD             reduce using rule 73 (exp -> NOT exp .)
    COLON           reduce using rule 73 (exp -> NOT exp .)
    COMMA           reduce using rule 73 (exp -> NOT exp .)
    RRB             reduce using rule 73 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 73 (exp -> NOT exp .)

  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]


state 69

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 70

    (25) block -> LCB stmtlist . RCB
    (28) stmtlist -> stmtlist . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 108
    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 109
    exp                            shift and go to state 74
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 71

    (26) block -> LCB RCB .

    $end            reduce using rule 26 (block -> LCB RCB .)
    RCB             reduce using rule 26 (block -> LCB RCB .)
    RETURN          reduce using rule 26 (block -> LCB RCB .)
    WHILE           reduce using rule 26 (block -> LCB RCB .)
    ON              reduce using rule 26 (block -> LCB RCB .)
    FOR             reduce using rule 26 (block -> LCB RCB .)
    IF              reduce using rule 26 (block -> LCB RCB .)
    PRINT           reduce using rule 26 (block -> LCB RCB .)
    ID              reduce using rule 26 (block -> LCB RCB .)
    LRB             reduce using rule 26 (block -> LCB RCB .)
    SUB             reduce using rule 26 (block -> LCB RCB .)
    NOT             reduce using rule 26 (block -> LCB RCB .)
    LCB             reduce using rule 26 (block -> LCB RCB .)
    INTEGERNUMBER   reduce using rule 26 (block -> LCB RCB .)
    FLOATNUMBER     reduce using rule 26 (block -> LCB RCB .)
    TRUE            reduce using rule 26 (block -> LCB RCB .)
    FALSE           reduce using rule 26 (block -> LCB RCB .)
    MAIN            reduce using rule 26 (block -> LCB RCB .)
    FUNCTION        reduce using rule 26 (block -> LCB RCB .)
    ELSE            reduce using rule 26 (block -> LCB RCB .)
    ELSEIF          reduce using rule 26 (block -> LCB RCB .)
    WHERE           reduce using rule 26 (block -> LCB RCB .)


state 72

    (27) stmtlist -> stmt .

    RCB             reduce using rule 27 (stmtlist -> stmt .)
    RETURN          reduce using rule 27 (stmtlist -> stmt .)
    WHILE           reduce using rule 27 (stmtlist -> stmt .)
    ON              reduce using rule 27 (stmtlist -> stmt .)
    FOR             reduce using rule 27 (stmtlist -> stmt .)
    IF              reduce using rule 27 (stmtlist -> stmt .)
    PRINT           reduce using rule 27 (stmtlist -> stmt .)
    ID              reduce using rule 27 (stmtlist -> stmt .)
    LRB             reduce using rule 27 (stmtlist -> stmt .)
    SUB             reduce using rule 27 (stmtlist -> stmt .)
    NOT             reduce using rule 27 (stmtlist -> stmt .)
    LCB             reduce using rule 27 (stmtlist -> stmt .)
    INTEGERNUMBER   reduce using rule 27 (stmtlist -> stmt .)
    FLOATNUMBER     reduce using rule 27 (stmtlist -> stmt .)
    TRUE            reduce using rule 27 (stmtlist -> stmt .)
    FALSE           reduce using rule 27 (stmtlist -> stmt .)
    WHERE           reduce using rule 27 (stmtlist -> stmt .)


state 73

    (33) stmt -> RETURN . exp SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 110
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 74

    (34) stmt -> exp . SEMICOLON
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    SEMICOLON       shift and go to state 111
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 75

    (35) stmt -> block .

    RCB             reduce using rule 35 (stmt -> block .)
    RETURN          reduce using rule 35 (stmt -> block .)
    WHILE           reduce using rule 35 (stmt -> block .)
    ON              reduce using rule 35 (stmt -> block .)
    FOR             reduce using rule 35 (stmt -> block .)
    IF              reduce using rule 35 (stmt -> block .)
    PRINT           reduce using rule 35 (stmt -> block .)
    ID              reduce using rule 35 (stmt -> block .)
    LRB             reduce using rule 35 (stmt -> block .)
    SUB             reduce using rule 35 (stmt -> block .)
    NOT             reduce using rule 35 (stmt -> block .)
    LCB             reduce using rule 35 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> block .)
    FLOATNUMBER     reduce using rule 35 (stmt -> block .)
    TRUE            reduce using rule 35 (stmt -> block .)
    FALSE           reduce using rule 35 (stmt -> block .)
    ELSE            reduce using rule 35 (stmt -> block .)
    ELSEIF          reduce using rule 35 (stmt -> block .)
    WHERE           reduce using rule 35 (stmt -> block .)


state 76

    (36) stmt -> vardec .

    RCB             reduce using rule 36 (stmt -> vardec .)
    RETURN          reduce using rule 36 (stmt -> vardec .)
    WHILE           reduce using rule 36 (stmt -> vardec .)
    ON              reduce using rule 36 (stmt -> vardec .)
    FOR             reduce using rule 36 (stmt -> vardec .)
    IF              reduce using rule 36 (stmt -> vardec .)
    PRINT           reduce using rule 36 (stmt -> vardec .)
    ID              reduce using rule 36 (stmt -> vardec .)
    LRB             reduce using rule 36 (stmt -> vardec .)
    SUB             reduce using rule 36 (stmt -> vardec .)
    NOT             reduce using rule 36 (stmt -> vardec .)
    LCB             reduce using rule 36 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 36 (stmt -> vardec .)
    TRUE            reduce using rule 36 (stmt -> vardec .)
    FALSE           reduce using rule 36 (stmt -> vardec .)
    ELSE            reduce using rule 36 (stmt -> vardec .)
    ELSEIF          reduce using rule 36 (stmt -> vardec .)
    WHERE           reduce using rule 36 (stmt -> vardec .)


state 77

    (37) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 112


state 78

    (38) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON . LRB exp RRB LCB RCB SEMICOLON

    LRB             shift and go to state 113


state 79

    (40) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 114


state 80

    (62) exp -> ID . ASSIGN exp
    (63) exp -> ID . LSB exp RSB ASSIGN exp
    (67) exp -> ID .
    (68) exp -> ID . LSB exp RSB
    (69) exp -> ID . LRB explist RRB
    (71) exp -> ID . LRB RRB
    (10) iddec -> ID .
    (11) iddec -> ID . LSB exp RSB
    (12) iddec -> ID . ASSIGN exp

    ASSIGN          shift and go to state 115
    LSB             shift and go to state 116
    SEMICOLON       reduce using rule 67 (exp -> ID .)
    GT              reduce using rule 67 (exp -> ID .)
    LT              reduce using rule 67 (exp -> ID .)
    NE              reduce using rule 67 (exp -> ID .)
    EQ              reduce using rule 67 (exp -> ID .)
    GE              reduce using rule 67 (exp -> ID .)
    LE              reduce using rule 67 (exp -> ID .)
    AND             reduce using rule 67 (exp -> ID .)
    OR              reduce using rule 67 (exp -> ID .)
    SUM             reduce using rule 67 (exp -> ID .)
    SUB             reduce using rule 67 (exp -> ID .)
    MUL             reduce using rule 67 (exp -> ID .)
    DIV             reduce using rule 67 (exp -> ID .)
    MOD             reduce using rule 67 (exp -> ID .)
    LRB             shift and go to state 51
    COLON           reduce using rule 10 (iddec -> ID .)
    COMMA           reduce using rule 10 (iddec -> ID .)


state 81

    (42) stmt -> IF . LRB exp RRB stmt elseiflist
    (43) stmt -> IF . LRB exp RRB stmt
    (44) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> IF . LRB exp RRB stmt ELSE stmt

    LRB             shift and go to state 117


state 82

    (46) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 118


state 83

    (23) paramdec -> ID COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 119

state 84

    (24) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 120


state 85

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (18) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB

    COLON           shift and go to state 121
    LCB             shift and go to state 42

    block                          shift and go to state 122

state 86

    (17) funcdec -> FUNCTION ID LRB RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 123

state 87

    (19) funcdec -> FUNCTION ID LRB RRB block .

    MAIN            reduce using rule 19 (funcdec -> FUNCTION ID LRB RRB block .)
    FUNCTION        reduce using rule 19 (funcdec -> FUNCTION ID LRB RRB block .)
    ID              reduce using rule 19 (funcdec -> FUNCTION ID LRB RRB block .)


state 88

    (22) paramdecslist -> paramdecslist COMMA . paramdec
    (23) paramdec -> . ID COLON type
    (24) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 44

    paramdec                       shift and go to state 124

state 89

    (62) exp -> ID ASSIGN exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 62 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 62 (exp -> ID ASSIGN exp .)
    COMMA           reduce using rule 62 (exp -> ID ASSIGN exp .)
    RRB             reduce using rule 62 (exp -> ID ASSIGN exp .)
    SEMICOLON       reduce using rule 62 (exp -> ID ASSIGN exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! LT              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! NE              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! EQ              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! GE              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! LE              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! AND             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! OR              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! SUM             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]


state 90

    (63) exp -> ID LSB exp . RSB ASSIGN exp
    (68) exp -> ID LSB exp . RSB
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             shift and go to state 125
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 91

    (69) exp -> ID LRB explist . RRB
    (79) explist -> explist . COMMA exp

    RRB             shift and go to state 126
    COMMA           shift and go to state 127


state 92

    (71) exp -> ID LRB RRB .

    RSB             reduce using rule 71 (exp -> ID LRB RRB .)
    GT              reduce using rule 71 (exp -> ID LRB RRB .)
    LT              reduce using rule 71 (exp -> ID LRB RRB .)
    NE              reduce using rule 71 (exp -> ID LRB RRB .)
    EQ              reduce using rule 71 (exp -> ID LRB RRB .)
    GE              reduce using rule 71 (exp -> ID LRB RRB .)
    LE              reduce using rule 71 (exp -> ID LRB RRB .)
    AND             reduce using rule 71 (exp -> ID LRB RRB .)
    OR              reduce using rule 71 (exp -> ID LRB RRB .)
    SUM             reduce using rule 71 (exp -> ID LRB RRB .)
    SUB             reduce using rule 71 (exp -> ID LRB RRB .)
    MUL             reduce using rule 71 (exp -> ID LRB RRB .)
    DIV             reduce using rule 71 (exp -> ID LRB RRB .)
    MOD             reduce using rule 71 (exp -> ID LRB RRB .)
    COLON           reduce using rule 71 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 71 (exp -> ID LRB RRB .)
    RRB             reduce using rule 71 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 71 (exp -> ID LRB RRB .)


state 93

    (78) explist -> exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             reduce using rule 78 (explist -> exp .)
    COMMA           reduce using rule 78 (explist -> exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 94

    (49) relopexp -> exp GT exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 49 (relopexp -> exp GT exp .)
    GT              reduce using rule 49 (relopexp -> exp GT exp .)
    LT              reduce using rule 49 (relopexp -> exp GT exp .)
    NE              reduce using rule 49 (relopexp -> exp GT exp .)
    EQ              reduce using rule 49 (relopexp -> exp GT exp .)
    GE              reduce using rule 49 (relopexp -> exp GT exp .)
    LE              reduce using rule 49 (relopexp -> exp GT exp .)
    AND             reduce using rule 49 (relopexp -> exp GT exp .)
    OR              reduce using rule 49 (relopexp -> exp GT exp .)
    COLON           reduce using rule 49 (relopexp -> exp GT exp .)
    COMMA           reduce using rule 49 (relopexp -> exp GT exp .)
    RRB             reduce using rule 49 (relopexp -> exp GT exp .)
    SEMICOLON       reduce using rule 49 (relopexp -> exp GT exp .)
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! SUM             [ reduce using rule 49 (relopexp -> exp GT exp .) ]
  ! SUB             [ reduce using rule 49 (relopexp -> exp GT exp .) ]
  ! MUL             [ reduce using rule 49 (relopexp -> exp GT exp .) ]
  ! DIV             [ reduce using rule 49 (relopexp -> exp GT exp .) ]
  ! MOD             [ reduce using rule 49 (relopexp -> exp GT exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 95

    (50) relopexp -> exp LT exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 50 (relopexp -> exp LT exp .)
    GT              reduce using rule 50 (relopexp -> exp LT exp .)
    LT              reduce using rule 50 (relopexp -> exp LT exp .)
    NE              reduce using rule 50 (relopexp -> exp LT exp .)
    EQ              reduce using rule 50 (relopexp -> exp LT exp .)
    GE              reduce using rule 50 (relopexp -> exp LT exp .)
    LE              reduce using rule 50 (relopexp -> exp LT exp .)
    AND             reduce using rule 50 (relopexp -> exp LT exp .)
    OR              reduce using rule 50 (relopexp -> exp LT exp .)
    COLON           reduce using rule 50 (relopexp -> exp LT exp .)
    COMMA           reduce using rule 50 (relopexp -> exp LT exp .)
    RRB             reduce using rule 50 (relopexp -> exp LT exp .)
    SEMICOLON       reduce using rule 50 (relopexp -> exp LT exp .)
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! SUM             [ reduce using rule 50 (relopexp -> exp LT exp .) ]
  ! SUB             [ reduce using rule 50 (relopexp -> exp LT exp .) ]
  ! MUL             [ reduce using rule 50 (relopexp -> exp LT exp .) ]
  ! DIV             [ reduce using rule 50 (relopexp -> exp LT exp .) ]
  ! MOD             [ reduce using rule 50 (relopexp -> exp LT exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 96

    (51) relopexp -> exp NE exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 51 (relopexp -> exp NE exp .)
    NE              reduce using rule 51 (relopexp -> exp NE exp .)
    EQ              reduce using rule 51 (relopexp -> exp NE exp .)
    AND             reduce using rule 51 (relopexp -> exp NE exp .)
    OR              reduce using rule 51 (relopexp -> exp NE exp .)
    COLON           reduce using rule 51 (relopexp -> exp NE exp .)
    COMMA           reduce using rule 51 (relopexp -> exp NE exp .)
    RRB             reduce using rule 51 (relopexp -> exp NE exp .)
    SEMICOLON       reduce using rule 51 (relopexp -> exp NE exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 57
    LE              shift and go to state 58
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! LT              [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! GE              [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! LE              [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! SUM             [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! SUB             [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! MUL             [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! DIV             [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! MOD             [ reduce using rule 51 (relopexp -> exp NE exp .) ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 97

    (52) relopexp -> exp EQ exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 52 (relopexp -> exp EQ exp .)
    NE              reduce using rule 52 (relopexp -> exp EQ exp .)
    EQ              reduce using rule 52 (relopexp -> exp EQ exp .)
    AND             reduce using rule 52 (relopexp -> exp EQ exp .)
    OR              reduce using rule 52 (relopexp -> exp EQ exp .)
    COLON           reduce using rule 52 (relopexp -> exp EQ exp .)
    COMMA           reduce using rule 52 (relopexp -> exp EQ exp .)
    RRB             reduce using rule 52 (relopexp -> exp EQ exp .)
    SEMICOLON       reduce using rule 52 (relopexp -> exp EQ exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    GE              shift and go to state 57
    LE              shift and go to state 58
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! LT              [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! GE              [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! LE              [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! SUM             [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! SUB             [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! MUL             [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! DIV             [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! MOD             [ reduce using rule 52 (relopexp -> exp EQ exp .) ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 98

    (53) relopexp -> exp GE exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 53 (relopexp -> exp GE exp .)
    GT              reduce using rule 53 (relopexp -> exp GE exp .)
    LT              reduce using rule 53 (relopexp -> exp GE exp .)
    NE              reduce using rule 53 (relopexp -> exp GE exp .)
    EQ              reduce using rule 53 (relopexp -> exp GE exp .)
    GE              reduce using rule 53 (relopexp -> exp GE exp .)
    LE              reduce using rule 53 (relopexp -> exp GE exp .)
    AND             reduce using rule 53 (relopexp -> exp GE exp .)
    OR              reduce using rule 53 (relopexp -> exp GE exp .)
    COLON           reduce using rule 53 (relopexp -> exp GE exp .)
    COMMA           reduce using rule 53 (relopexp -> exp GE exp .)
    RRB             reduce using rule 53 (relopexp -> exp GE exp .)
    SEMICOLON       reduce using rule 53 (relopexp -> exp GE exp .)
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! SUM             [ reduce using rule 53 (relopexp -> exp GE exp .) ]
  ! SUB             [ reduce using rule 53 (relopexp -> exp GE exp .) ]
  ! MUL             [ reduce using rule 53 (relopexp -> exp GE exp .) ]
  ! DIV             [ reduce using rule 53 (relopexp -> exp GE exp .) ]
  ! MOD             [ reduce using rule 53 (relopexp -> exp GE exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 99

    (54) relopexp -> exp LE exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 54 (relopexp -> exp LE exp .)
    GT              reduce using rule 54 (relopexp -> exp LE exp .)
    LT              reduce using rule 54 (relopexp -> exp LE exp .)
    NE              reduce using rule 54 (relopexp -> exp LE exp .)
    EQ              reduce using rule 54 (relopexp -> exp LE exp .)
    GE              reduce using rule 54 (relopexp -> exp LE exp .)
    LE              reduce using rule 54 (relopexp -> exp LE exp .)
    AND             reduce using rule 54 (relopexp -> exp LE exp .)
    OR              reduce using rule 54 (relopexp -> exp LE exp .)
    COLON           reduce using rule 54 (relopexp -> exp LE exp .)
    COMMA           reduce using rule 54 (relopexp -> exp LE exp .)
    RRB             reduce using rule 54 (relopexp -> exp LE exp .)
    SEMICOLON       reduce using rule 54 (relopexp -> exp LE exp .)
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! SUM             [ reduce using rule 54 (relopexp -> exp LE exp .) ]
  ! SUB             [ reduce using rule 54 (relopexp -> exp LE exp .) ]
  ! MUL             [ reduce using rule 54 (relopexp -> exp LE exp .) ]
  ! DIV             [ reduce using rule 54 (relopexp -> exp LE exp .) ]
  ! MOD             [ reduce using rule 54 (relopexp -> exp LE exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 100

    (55) otherop -> exp AND exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 55 (otherop -> exp AND exp .)
    AND             reduce using rule 55 (otherop -> exp AND exp .)
    OR              reduce using rule 55 (otherop -> exp AND exp .)
    COLON           reduce using rule 55 (otherop -> exp AND exp .)
    COMMA           reduce using rule 55 (otherop -> exp AND exp .)
    RRB             reduce using rule 55 (otherop -> exp AND exp .)
    SEMICOLON       reduce using rule 55 (otherop -> exp AND exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! LT              [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! NE              [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! EQ              [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! GE              [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! LE              [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! SUM             [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! SUB             [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! MUL             [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! DIV             [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! MOD             [ reduce using rule 55 (otherop -> exp AND exp .) ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]


state 101

    (56) otherop -> exp OR exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 56 (otherop -> exp OR exp .)
    OR              reduce using rule 56 (otherop -> exp OR exp .)
    COLON           reduce using rule 56 (otherop -> exp OR exp .)
    COMMA           reduce using rule 56 (otherop -> exp OR exp .)
    RRB             reduce using rule 56 (otherop -> exp OR exp .)
    SEMICOLON       reduce using rule 56 (otherop -> exp OR exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! LT              [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! NE              [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! EQ              [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! GE              [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! LE              [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! AND             [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! SUM             [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! SUB             [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! MUL             [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! DIV             [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! MOD             [ reduce using rule 56 (otherop -> exp OR exp .) ]
  ! OR              [ shift and go to state 60 ]


state 102

    (57) otherop -> exp SUM exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 57 (otherop -> exp SUM exp .)
    GT              reduce using rule 57 (otherop -> exp SUM exp .)
    LT              reduce using rule 57 (otherop -> exp SUM exp .)
    NE              reduce using rule 57 (otherop -> exp SUM exp .)
    EQ              reduce using rule 57 (otherop -> exp SUM exp .)
    GE              reduce using rule 57 (otherop -> exp SUM exp .)
    LE              reduce using rule 57 (otherop -> exp SUM exp .)
    AND             reduce using rule 57 (otherop -> exp SUM exp .)
    OR              reduce using rule 57 (otherop -> exp SUM exp .)
    SUM             reduce using rule 57 (otherop -> exp SUM exp .)
    SUB             reduce using rule 57 (otherop -> exp SUM exp .)
    COLON           reduce using rule 57 (otherop -> exp SUM exp .)
    COMMA           reduce using rule 57 (otherop -> exp SUM exp .)
    RRB             reduce using rule 57 (otherop -> exp SUM exp .)
    SEMICOLON       reduce using rule 57 (otherop -> exp SUM exp .)
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! MUL             [ reduce using rule 57 (otherop -> exp SUM exp .) ]
  ! DIV             [ reduce using rule 57 (otherop -> exp SUM exp .) ]
  ! MOD             [ reduce using rule 57 (otherop -> exp SUM exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 103

    (58) otherop -> exp SUB exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 58 (otherop -> exp SUB exp .)
    GT              reduce using rule 58 (otherop -> exp SUB exp .)
    LT              reduce using rule 58 (otherop -> exp SUB exp .)
    NE              reduce using rule 58 (otherop -> exp SUB exp .)
    EQ              reduce using rule 58 (otherop -> exp SUB exp .)
    GE              reduce using rule 58 (otherop -> exp SUB exp .)
    LE              reduce using rule 58 (otherop -> exp SUB exp .)
    AND             reduce using rule 58 (otherop -> exp SUB exp .)
    OR              reduce using rule 58 (otherop -> exp SUB exp .)
    SUM             reduce using rule 58 (otherop -> exp SUB exp .)
    SUB             reduce using rule 58 (otherop -> exp SUB exp .)
    COLON           reduce using rule 58 (otherop -> exp SUB exp .)
    COMMA           reduce using rule 58 (otherop -> exp SUB exp .)
    RRB             reduce using rule 58 (otherop -> exp SUB exp .)
    SEMICOLON       reduce using rule 58 (otherop -> exp SUB exp .)
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! MUL             [ reduce using rule 58 (otherop -> exp SUB exp .) ]
  ! DIV             [ reduce using rule 58 (otherop -> exp SUB exp .) ]
  ! MOD             [ reduce using rule 58 (otherop -> exp SUB exp .) ]
  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]


state 104

    (59) otherop -> exp MUL exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 59 (otherop -> exp MUL exp .)
    GT              reduce using rule 59 (otherop -> exp MUL exp .)
    LT              reduce using rule 59 (otherop -> exp MUL exp .)
    NE              reduce using rule 59 (otherop -> exp MUL exp .)
    EQ              reduce using rule 59 (otherop -> exp MUL exp .)
    GE              reduce using rule 59 (otherop -> exp MUL exp .)
    LE              reduce using rule 59 (otherop -> exp MUL exp .)
    AND             reduce using rule 59 (otherop -> exp MUL exp .)
    OR              reduce using rule 59 (otherop -> exp MUL exp .)
    SUM             reduce using rule 59 (otherop -> exp MUL exp .)
    SUB             reduce using rule 59 (otherop -> exp MUL exp .)
    MUL             reduce using rule 59 (otherop -> exp MUL exp .)
    DIV             reduce using rule 59 (otherop -> exp MUL exp .)
    MOD             reduce using rule 59 (otherop -> exp MUL exp .)
    COLON           reduce using rule 59 (otherop -> exp MUL exp .)
    COMMA           reduce using rule 59 (otherop -> exp MUL exp .)
    RRB             reduce using rule 59 (otherop -> exp MUL exp .)
    SEMICOLON       reduce using rule 59 (otherop -> exp MUL exp .)

  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]


state 105

    (60) otherop -> exp DIV exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 60 (otherop -> exp DIV exp .)
    GT              reduce using rule 60 (otherop -> exp DIV exp .)
    LT              reduce using rule 60 (otherop -> exp DIV exp .)
    NE              reduce using rule 60 (otherop -> exp DIV exp .)
    EQ              reduce using rule 60 (otherop -> exp DIV exp .)
    GE              reduce using rule 60 (otherop -> exp DIV exp .)
    LE              reduce using rule 60 (otherop -> exp DIV exp .)
    AND             reduce using rule 60 (otherop -> exp DIV exp .)
    OR              reduce using rule 60 (otherop -> exp DIV exp .)
    SUM             reduce using rule 60 (otherop -> exp DIV exp .)
    SUB             reduce using rule 60 (otherop -> exp DIV exp .)
    MUL             reduce using rule 60 (otherop -> exp DIV exp .)
    DIV             reduce using rule 60 (otherop -> exp DIV exp .)
    MOD             reduce using rule 60 (otherop -> exp DIV exp .)
    COLON           reduce using rule 60 (otherop -> exp DIV exp .)
    COMMA           reduce using rule 60 (otherop -> exp DIV exp .)
    RRB             reduce using rule 60 (otherop -> exp DIV exp .)
    SEMICOLON       reduce using rule 60 (otherop -> exp DIV exp .)

  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]


state 106

    (61) otherop -> exp MOD exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 61 (otherop -> exp MOD exp .)
    GT              reduce using rule 61 (otherop -> exp MOD exp .)
    LT              reduce using rule 61 (otherop -> exp MOD exp .)
    NE              reduce using rule 61 (otherop -> exp MOD exp .)
    EQ              reduce using rule 61 (otherop -> exp MOD exp .)
    GE              reduce using rule 61 (otherop -> exp MOD exp .)
    LE              reduce using rule 61 (otherop -> exp MOD exp .)
    AND             reduce using rule 61 (otherop -> exp MOD exp .)
    OR              reduce using rule 61 (otherop -> exp MOD exp .)
    SUM             reduce using rule 61 (otherop -> exp MOD exp .)
    SUB             reduce using rule 61 (otherop -> exp MOD exp .)
    MUL             reduce using rule 61 (otherop -> exp MOD exp .)
    DIV             reduce using rule 61 (otherop -> exp MOD exp .)
    MOD             reduce using rule 61 (otherop -> exp MOD exp .)
    COLON           reduce using rule 61 (otherop -> exp MOD exp .)
    COMMA           reduce using rule 61 (otherop -> exp MOD exp .)
    RRB             reduce using rule 61 (otherop -> exp MOD exp .)
    SEMICOLON       reduce using rule 61 (otherop -> exp MOD exp .)

  ! GT              [ shift and go to state 53 ]
  ! LT              [ shift and go to state 54 ]
  ! NE              [ shift and go to state 55 ]
  ! EQ              [ shift and go to state 56 ]
  ! GE              [ shift and go to state 57 ]
  ! LE              [ shift and go to state 58 ]
  ! AND             [ shift and go to state 59 ]
  ! OR              [ shift and go to state 60 ]
  ! SUM             [ shift and go to state 61 ]
  ! SUB             [ shift and go to state 62 ]
  ! MUL             [ shift and go to state 63 ]
  ! DIV             [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]


state 107

    (70) exp -> LRB exp RRB .

    RSB             reduce using rule 70 (exp -> LRB exp RRB .)
    GT              reduce using rule 70 (exp -> LRB exp RRB .)
    LT              reduce using rule 70 (exp -> LRB exp RRB .)
    NE              reduce using rule 70 (exp -> LRB exp RRB .)
    EQ              reduce using rule 70 (exp -> LRB exp RRB .)
    GE              reduce using rule 70 (exp -> LRB exp RRB .)
    LE              reduce using rule 70 (exp -> LRB exp RRB .)
    AND             reduce using rule 70 (exp -> LRB exp RRB .)
    OR              reduce using rule 70 (exp -> LRB exp RRB .)
    SUM             reduce using rule 70 (exp -> LRB exp RRB .)
    SUB             reduce using rule 70 (exp -> LRB exp RRB .)
    MUL             reduce using rule 70 (exp -> LRB exp RRB .)
    DIV             reduce using rule 70 (exp -> LRB exp RRB .)
    MOD             reduce using rule 70 (exp -> LRB exp RRB .)
    COLON           reduce using rule 70 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 70 (exp -> LRB exp RRB .)
    RRB             reduce using rule 70 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 70 (exp -> LRB exp RRB .)


state 108

    (25) block -> LCB stmtlist RCB .

    $end            reduce using rule 25 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 25 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 25 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 25 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 25 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 25 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 25 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 25 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 25 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 25 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 25 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 25 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 25 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 25 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 25 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 25 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 25 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 25 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 25 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 25 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 25 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 25 (block -> LCB stmtlist RCB .)


state 109

    (28) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 28 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 28 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 28 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 28 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 28 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 28 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 28 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 28 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 28 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 28 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 28 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 28 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 28 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 28 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 28 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 28 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 28 (stmtlist -> stmtlist stmt .)


state 110

    (33) stmt -> RETURN exp . SEMICOLON
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    SEMICOLON       shift and go to state 128
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 111

    (34) stmt -> exp SEMICOLON .

    RCB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 34 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 34 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 34 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 34 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 34 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 34 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 34 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 34 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 34 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 34 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 34 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 34 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 34 (stmt -> exp SEMICOLON .)


state 112

    (37) stmt -> WHILE LRB . exp RRB stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 129
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 113

    (38) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB . exp RRB LCB RCB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 130
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 114

    (40) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> FOR LRB . ID IN ID RRB stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 132
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 131
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 115

    (62) exp -> ID ASSIGN . exp
    (12) iddec -> ID ASSIGN . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 133
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 116

    (63) exp -> ID LSB . exp RSB ASSIGN exp
    (68) exp -> ID LSB . exp RSB
    (11) iddec -> ID LSB . exp RSB
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 134
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 117

    (42) stmt -> IF LRB . exp RRB stmt elseiflist
    (43) stmt -> IF LRB . exp RRB stmt
    (44) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> IF LRB . exp RRB stmt ELSE stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 135
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 118

    (46) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 136


state 119

    (23) paramdec -> ID COLON type .

    COMMA           reduce using rule 23 (paramdec -> ID COLON type .)
    RRB             reduce using rule 23 (paramdec -> ID COLON type .)


state 120

    (24) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 137


state 121

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 138

state 122

    (18) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 18 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 18 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 18 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 123

    (17) funcdec -> FUNCTION ID LRB RRB COLON type . block
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB

    LCB             shift and go to state 42

    block                          shift and go to state 139

state 124

    (22) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 22 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 22 (paramdecslist -> paramdecslist COMMA paramdec .)


state 125

    (63) exp -> ID LSB exp RSB . ASSIGN exp
    (68) exp -> ID LSB exp RSB .

    ASSIGN          shift and go to state 140
    RSB             reduce using rule 68 (exp -> ID LSB exp RSB .)
    GT              reduce using rule 68 (exp -> ID LSB exp RSB .)
    LT              reduce using rule 68 (exp -> ID LSB exp RSB .)
    NE              reduce using rule 68 (exp -> ID LSB exp RSB .)
    EQ              reduce using rule 68 (exp -> ID LSB exp RSB .)
    GE              reduce using rule 68 (exp -> ID LSB exp RSB .)
    LE              reduce using rule 68 (exp -> ID LSB exp RSB .)
    AND             reduce using rule 68 (exp -> ID LSB exp RSB .)
    OR              reduce using rule 68 (exp -> ID LSB exp RSB .)
    SUM             reduce using rule 68 (exp -> ID LSB exp RSB .)
    SUB             reduce using rule 68 (exp -> ID LSB exp RSB .)
    MUL             reduce using rule 68 (exp -> ID LSB exp RSB .)
    DIV             reduce using rule 68 (exp -> ID LSB exp RSB .)
    MOD             reduce using rule 68 (exp -> ID LSB exp RSB .)
    COLON           reduce using rule 68 (exp -> ID LSB exp RSB .)
    COMMA           reduce using rule 68 (exp -> ID LSB exp RSB .)
    RRB             reduce using rule 68 (exp -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 68 (exp -> ID LSB exp RSB .)


state 126

    (69) exp -> ID LRB explist RRB .

    RSB             reduce using rule 69 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 69 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 69 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 69 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 69 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 69 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 69 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 69 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 69 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 69 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 69 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 69 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 69 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 69 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 69 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 69 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 69 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 69 (exp -> ID LRB explist RRB .)


state 127

    (79) explist -> explist COMMA . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 141
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 128

    (33) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 33 (stmt -> RETURN exp SEMICOLON .)


state 129

    (37) stmt -> WHILE LRB exp . RRB stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 142
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 130

    (38) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB exp . RRB LCB RCB SEMICOLON
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 143
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 131

    (40) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    SEMICOLON       shift and go to state 144
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 132

    (41) stmt -> FOR LRB ID . IN ID RRB stmt
    (62) exp -> ID . ASSIGN exp
    (63) exp -> ID . LSB exp RSB ASSIGN exp
    (67) exp -> ID .
    (68) exp -> ID . LSB exp RSB
    (69) exp -> ID . LRB explist RRB
    (71) exp -> ID . LRB RRB

    IN              shift and go to state 145
    ASSIGN          shift and go to state 49
    LSB             shift and go to state 50
    SEMICOLON       reduce using rule 67 (exp -> ID .)
    GT              reduce using rule 67 (exp -> ID .)
    LT              reduce using rule 67 (exp -> ID .)
    NE              reduce using rule 67 (exp -> ID .)
    EQ              reduce using rule 67 (exp -> ID .)
    GE              reduce using rule 67 (exp -> ID .)
    LE              reduce using rule 67 (exp -> ID .)
    AND             reduce using rule 67 (exp -> ID .)
    OR              reduce using rule 67 (exp -> ID .)
    SUM             reduce using rule 67 (exp -> ID .)
    SUB             reduce using rule 67 (exp -> ID .)
    MUL             reduce using rule 67 (exp -> ID .)
    DIV             reduce using rule 67 (exp -> ID .)
    MOD             reduce using rule 67 (exp -> ID .)
    LRB             shift and go to state 51


state 133

    (62) exp -> ID ASSIGN exp .
    (12) iddec -> ID ASSIGN exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    SEMICOLON       reduce using rule 62 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 12 (iddec -> ID ASSIGN exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! LT              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! NE              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! EQ              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! GE              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! LE              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! AND             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! OR              [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! SUM             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 62 (exp -> ID ASSIGN exp .) ]


state 134

    (63) exp -> ID LSB exp . RSB ASSIGN exp
    (68) exp -> ID LSB exp . RSB
    (11) iddec -> ID LSB exp . RSB
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             shift and go to state 146
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 135

    (42) stmt -> IF LRB exp . RRB stmt elseiflist
    (43) stmt -> IF LRB exp . RRB stmt
    (44) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (45) stmt -> IF LRB exp . RRB stmt ELSE stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 147
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 136

    (46) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 148


state 137

    (24) paramdec -> ID LSB RSB COLON . type
    (7) type -> . INTEGER
    (8) type -> . FLOAT
    (9) type -> . BOOLEAN

    INTEGER         shift and go to state 22
    FLOAT           shift and go to state 23
    BOOLEAN         shift and go to state 24

    type                           shift and go to state 149

state 138

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB

    LCB             shift and go to state 42

    block                          shift and go to state 150

state 139

    (17) funcdec -> FUNCTION ID LRB RRB COLON type block .

    MAIN            reduce using rule 17 (funcdec -> FUNCTION ID LRB RRB COLON type block .)
    FUNCTION        reduce using rule 17 (funcdec -> FUNCTION ID LRB RRB COLON type block .)
    ID              reduce using rule 17 (funcdec -> FUNCTION ID LRB RRB COLON type block .)


state 140

    (63) exp -> ID LSB exp RSB ASSIGN . exp
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 151
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 141

    (79) explist -> explist COMMA exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             reduce using rule 79 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 79 (explist -> explist COMMA exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 142

    (37) stmt -> WHILE LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 152
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 143

    (38) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON
    (39) stmt -> ON LRB exp RRB . LCB RCB SEMICOLON

    LCB             shift and go to state 153


state 144

    (40) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 154
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 145

    (41) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 155


state 146

    (63) exp -> ID LSB exp RSB . ASSIGN exp
    (68) exp -> ID LSB exp RSB .
    (11) iddec -> ID LSB exp RSB .

    ASSIGN          shift and go to state 140
    SEMICOLON       reduce using rule 68 (exp -> ID LSB exp RSB .)
    GT              reduce using rule 68 (exp -> ID LSB exp RSB .)
    LT              reduce using rule 68 (exp -> ID LSB exp RSB .)
    NE              reduce using rule 68 (exp -> ID LSB exp RSB .)
    EQ              reduce using rule 68 (exp -> ID LSB exp RSB .)
    GE              reduce using rule 68 (exp -> ID LSB exp RSB .)
    LE              reduce using rule 68 (exp -> ID LSB exp RSB .)
    AND             reduce using rule 68 (exp -> ID LSB exp RSB .)
    OR              reduce using rule 68 (exp -> ID LSB exp RSB .)
    SUM             reduce using rule 68 (exp -> ID LSB exp RSB .)
    SUB             reduce using rule 68 (exp -> ID LSB exp RSB .)
    MUL             reduce using rule 68 (exp -> ID LSB exp RSB .)
    DIV             reduce using rule 68 (exp -> ID LSB exp RSB .)
    MOD             reduce using rule 68 (exp -> ID LSB exp RSB .)
    COLON           reduce using rule 11 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 11 (iddec -> ID LSB exp RSB .)


state 147

    (42) stmt -> IF LRB exp RRB . stmt elseiflist
    (43) stmt -> IF LRB exp RRB . stmt
    (44) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (45) stmt -> IF LRB exp RRB . stmt ELSE stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 156
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 148

    (46) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 157


state 149

    (24) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 24 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 24 (paramdec -> ID LSB RSB COLON type .)


state 150

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 151

    (63) exp -> ID LSB exp RSB ASSIGN exp .
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RSB             reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .)
    COLON           reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .)
    COMMA           reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .)
    RRB             reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .)
    SEMICOLON       reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .)
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65

  ! GT              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! LT              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! NE              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! EQ              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! GE              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! LE              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! AND             [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! OR              [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! SUM             [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! SUB             [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! MUL             [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! DIV             [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! MOD             [ reduce using rule 63 (exp -> ID LSB exp RSB ASSIGN exp .) ]


state 152

    (37) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 37 (stmt -> WHILE LRB exp RRB stmt .)


state 153

    (38) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (39) stmt -> ON LRB exp RRB LCB . RCB SEMICOLON
    (31) cases -> . case
    (32) cases -> . cases case
    (29) case -> . WHERE const COLON stmtlist
    (30) case -> . WHERE const COLON

    RCB             shift and go to state 159
    WHERE           shift and go to state 161

    cases                          shift and go to state 158
    case                           shift and go to state 160

state 154

    (40) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    SEMICOLON       shift and go to state 162
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 155

    (41) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 163


state 156

    (42) stmt -> IF LRB exp RRB stmt . elseiflist
    (43) stmt -> IF LRB exp RRB stmt .
    (44) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (45) stmt -> IF LRB exp RRB stmt . ELSE stmt
    (47) elseiflist -> . ELSEIF LRB exp RRB stmt
    (48) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt

    RCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    RETURN          reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    WHILE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    ON              reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    FOR             reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    IF              reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    PRINT           reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    ID              reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    LRB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    SUB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    NOT             reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    LCB             reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    TRUE            reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    FALSE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    WHERE           reduce using rule 43 (stmt -> IF LRB exp RRB stmt .)
    ELSE            shift and go to state 165
    ELSEIF          shift and go to state 166

  ! ELSE            [ reduce using rule 43 (stmt -> IF LRB exp RRB stmt .) ]
  ! ELSEIF          [ reduce using rule 43 (stmt -> IF LRB exp RRB stmt .) ]

    elseiflist                     shift and go to state 164

state 157

    (46) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 46 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 158

    (38) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (32) cases -> cases . case
    (29) case -> . WHERE const COLON stmtlist
    (30) case -> . WHERE const COLON

    RCB             shift and go to state 167
    WHERE           shift and go to state 161

    case                           shift and go to state 168

state 159

    (39) stmt -> ON LRB exp RRB LCB RCB . SEMICOLON

    SEMICOLON       shift and go to state 169


state 160

    (31) cases -> case .

    RCB             reduce using rule 31 (cases -> case .)
    WHERE           reduce using rule 31 (cases -> case .)


state 161

    (29) case -> WHERE . const COLON stmtlist
    (30) case -> WHERE . const COLON
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 170

state 162

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 171
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 163

    (41) stmt -> FOR LRB ID IN ID RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    stmt                           shift and go to state 172
    exp                            shift and go to state 74
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (42) stmt -> IF LRB exp RRB stmt elseiflist .
    (44) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (48) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

    RCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 173
    ELSEIF          shift and go to state 174

  ! ELSE            [ reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSEIF          [ reduce using rule 42 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 165

    (45) stmt -> IF LRB exp RRB stmt ELSE . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 175
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 166

    (47) elseiflist -> ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 176


state 167

    (38) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 177


state 168

    (32) cases -> cases case .

    RCB             reduce using rule 32 (cases -> cases case .)
    WHERE           reduce using rule 32 (cases -> cases case .)


state 169

    (39) stmt -> ON LRB exp RRB LCB RCB SEMICOLON .

    RCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    RETURN          reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHILE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ON              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FOR             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    IF              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    PRINT           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ID              reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LRB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    SUB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    NOT             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    LCB             reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    TRUE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    FALSE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSE            reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    ELSEIF          reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)
    WHERE           reduce using rule 39 (stmt -> ON LRB exp RRB LCB RCB SEMICOLON .)


state 170

    (29) case -> WHERE const . COLON stmtlist
    (30) case -> WHERE const . COLON

    COLON           shift and go to state 178


state 171

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 179
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 172

    (41) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 41 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 173

    (44) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 180
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 174

    (48) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 181


state 175

    (45) stmt -> IF LRB exp RRB stmt ELSE stmt .

    RCB             reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    RETURN          reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    WHILE           reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ON              reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    FOR             reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    IF              reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    PRINT           reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ID              reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    LRB             reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    SUB             reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    NOT             reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    LCB             reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    INTEGERNUMBER   reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    FLOATNUMBER     reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    TRUE            reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    FALSE           reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ELSE            reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    ELSEIF          reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)
    WHERE           reduce using rule 45 (stmt -> IF LRB exp RRB stmt ELSE stmt .)


state 176

    (47) elseiflist -> ELSEIF LRB . exp RRB stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 182
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 177

    (38) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 38 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 178

    (29) case -> WHERE const COLON . stmtlist
    (30) case -> WHERE const COLON .
    (27) stmtlist -> . stmt
    (28) stmtlist -> . stmtlist stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 30 (case -> WHERE const COLON .)
    WHERE           reduce using rule 30 (case -> WHERE const COLON .)
    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 31
    stmtlist                       shift and go to state 183
    stmt                           shift and go to state 72
    exp                            shift and go to state 74
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 179

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 184
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 180

    (44) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 44 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 181

    (48) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE

    ID              shift and go to state 27
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 185
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31

state 182

    (47) elseiflist -> ELSEIF LRB exp . RRB stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 186
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 183

    (29) case -> WHERE const COLON stmtlist .
    (28) stmtlist -> stmtlist . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 29 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 29 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    const                          shift and go to state 31
    stmt                           shift and go to state 109
    exp                            shift and go to state 74
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 184

    (40) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 40 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 185

    (48) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (49) relopexp -> exp . GT exp
    (50) relopexp -> exp . LT exp
    (51) relopexp -> exp . NE exp
    (52) relopexp -> exp . EQ exp
    (53) relopexp -> exp . GE exp
    (54) relopexp -> exp . LE exp
    (55) otherop -> exp . AND exp
    (56) otherop -> exp . OR exp
    (57) otherop -> exp . SUM exp
    (58) otherop -> exp . SUB exp
    (59) otherop -> exp . MUL exp
    (60) otherop -> exp . DIV exp
    (61) otherop -> exp . MOD exp

    RRB             shift and go to state 187
    GT              shift and go to state 53
    LT              shift and go to state 54
    NE              shift and go to state 55
    EQ              shift and go to state 56
    GE              shift and go to state 57
    LE              shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60
    SUM             shift and go to state 61
    SUB             shift and go to state 62
    MUL             shift and go to state 63
    DIV             shift and go to state 64
    MOD             shift and go to state 65


state 186

    (47) elseiflist -> ELSEIF LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 188
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 187

    (48) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (33) stmt -> . RETURN exp SEMICOLON
    (34) stmt -> . exp SEMICOLON
    (35) stmt -> . block
    (36) stmt -> . vardec
    (37) stmt -> . WHILE LRB exp RRB stmt
    (38) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (39) stmt -> . ON LRB exp RRB LCB RCB SEMICOLON
    (40) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (41) stmt -> . FOR LRB ID IN ID RRB stmt
    (42) stmt -> . IF LRB exp RRB stmt elseiflist
    (43) stmt -> . IF LRB exp RRB stmt
    (44) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (45) stmt -> . IF LRB exp RRB stmt ELSE stmt
    (46) stmt -> . PRINT LRB ID RRB SEMICOLON
    (62) exp -> . ID ASSIGN exp
    (63) exp -> . ID LSB exp RSB ASSIGN exp
    (64) exp -> . relopexp
    (65) exp -> . otherop
    (66) exp -> . const
    (67) exp -> . ID
    (68) exp -> . ID LSB exp RSB
    (69) exp -> . ID LRB explist RRB
    (70) exp -> . LRB exp RRB
    (71) exp -> . ID LRB RRB
    (72) exp -> . SUB exp
    (73) exp -> . NOT exp
    (25) block -> . LCB stmtlist RCB
    (26) block -> . LCB RCB
    (15) vardec -> . idlist COLON type SEMICOLON
    (49) relopexp -> . exp GT exp
    (50) relopexp -> . exp LT exp
    (51) relopexp -> . exp NE exp
    (52) relopexp -> . exp EQ exp
    (53) relopexp -> . exp GE exp
    (54) relopexp -> . exp LE exp
    (55) otherop -> . exp AND exp
    (56) otherop -> . exp OR exp
    (57) otherop -> . exp SUM exp
    (58) otherop -> . exp SUB exp
    (59) otherop -> . exp MUL exp
    (60) otherop -> . exp DIV exp
    (61) otherop -> . exp MOD exp
    (74) const -> . INTEGERNUMBER
    (75) const -> . FLOATNUMBER
    (76) const -> . TRUE
    (77) const -> . FALSE
    (13) idlist -> . iddec
    (14) idlist -> . idlist COMMA iddec
    (10) iddec -> . ID
    (11) iddec -> . ID LSB exp RSB
    (12) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 73
    WHILE           shift and go to state 77
    ON              shift and go to state 78
    FOR             shift and go to state 79
    IF              shift and go to state 81
    PRINT           shift and go to state 82
    ID              shift and go to state 80
    LRB             shift and go to state 32
    SUB             shift and go to state 33
    NOT             shift and go to state 34
    LCB             shift and go to state 42
    INTEGERNUMBER   shift and go to state 35
    FLOATNUMBER     shift and go to state 36
    TRUE            shift and go to state 37
    FALSE           shift and go to state 38

    exp                            shift and go to state 74
    stmt                           shift and go to state 189
    block                          shift and go to state 75
    vardec                         shift and go to state 76
    relopexp                       shift and go to state 29
    otherop                        shift and go to state 30
    const                          shift and go to state 31
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 188

    (47) elseiflist -> ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 47 (elseiflist -> ELSEIF LRB exp RRB stmt .)


state 189

    (48) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 48 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

